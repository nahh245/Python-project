code 4 read me

for the string manipulation methods str.count(), str.replace(), and str.strip() in Python.


# String Manipulation Methods in Python

This repository provides an overview and examples of commonly used Python string methods: str.count(), str.replace(), and str.strip(). These methods are part of the Python str class and are essential tools for manipulating string data.

## Table of Contents
- [Installation](#installation)
- [Usage](#usage)
  - [str.count()](#strcount)
  - [str.replace()](#strreplace)
  - [str.strip()](#strstrip)
- [Examples](#examples)
- [Contributing](#contributing)
- [License](#license)



## Usage

### str.count()

- Description: Counts the number of non-overlapping occurrences of a substring in the string.
- Syntax: string.count(substring, start=..., end=...)
  - substring: The substring to count.
  - start (optional): Starting index to begin counting.
  - end (optional): Ending index up to which to count.
- Returns: The number of occurrences of the substring.

### Example
`python
original_string = "Hello World! Welcome to the World!"
count_world = original_string.count("World")
print(count_world)  # Output: 2
str.replace()
Description: Returns a new string with all occurrences of a specified substring replaced with another substring.
Syntax: string.replace(old, new, count)
old: The substring to be replaced.
new: The substring to replace with.
count (optional): Maximum number of occurrences to replace (default is all).
Returns: A new string with replaced substrings.
Example
python




original_string = "Hello World! Welcome to the World!"
replaced_string = original_string.replace("World", "Python")
print(replaced_string)  # Output: Hello Python! Welcome to the Python!
str.strip()
Description: Removes leading and trailing whitespace (or specified characters) from the string.
Syntax: string.strip([chars])
chars (optional): A string of characters to remove. If not provided, whitespace is removed.
Returns: A new string with leading and trailing characters removed.
Example
python




original_string = "   Hello World!   "
stripped_string = original_string.strip()
print(stripped_string)  # Output: "Hello World!"
Examples
The code examples for each method are provided above for your reference. Feel free to experiment with them in your Python environment.

Contributing
If you would like to contribute to this repository, please submit a pull request or open an issue for any suggestions or improvements.
